extends ../layout

block styles
    link(rel='stylesheet' href='/stylesheets/css/tickets.css')
    link(rel='stylesheet' href='/summernote/summernote.css')
    link(rel='stylesheet' href='/atJs/css/jquery.atwho.min.css')

block title
    title #{__('tickets.title')}

block content
    include ../navbar
    .container
        br
        .row
            .col.s12
                ul.tabs
                    li.tab.col.s4
                        a.noLineLink.active(href='#userTicket')
                            i.material-icons.tab-icon.hide-on-large-only.primaryColour-colour note
                            |
                            .hide-on-med-and-down.primaryColour-colour #{__('tickets.tabs.ticket')}
                    li.tab.col.s4
                        a.noLineLink(href='#comments')
                            i.material-icons.tab-icon.hide-on-large-only.primaryColour-colour comment
                            |
                            .hide-on-med-and-down.primaryColour-colour #{__('tickets.tabs.comments')}
                    li.tab.col.s4
                        a.noLineLink(href='#history')
                            i.material-icons.tab-icon.hide-on-large-only.primaryColour-colour event_note
                            |
                            .hide-on-med-and-down.primaryColour-colour #{__('tickets.tabs.history')}
        .row
            .col.s12
                #userTicket
                    .card.center
                        .card-image
                            a.btn-floating.halfway-fab.waves-effect.waves-light.cancelButtonBackground-background-colour.cancelButtonText-colour.left(href=`/project/${projectId}/team/${teamId}`)
                                i.material-icons arrow_back
                            a.btn-floating.halfway-fab.waves-effect.waves-light.primaryColour-background-colour.primaryTextOnPrimary-colour.right(onclick='enableEdit()')#editButton
                                i.material-icons edit
                        .card-content.editBlock
                            .row
                                .input-field.padding-10
                                    label #{__('tickets.id')}: #{ticket.displayId}
                            .row
                                .input-field.padding-10
                                    input.editField.validate(type='text', name='titleField', value=`${ticket.title}`)#titleField
                                    label(for='titleField') #{__('tickets.ticketTitle')}
                        .card-action.editBlock
                            .row
                                .col.s12.l8.padding-10.margin-10.secondaryColour-border-colour
                                    .row
                                        .input-field.padding-10.col.s12.m3
                                            select.icons#typeSelection
                                                option(value=0, data-icon='/img/icon-ladybird.png', selected=ticket.type===0)
                                                    | #{__('tickets.types.bug')}
                                                option(value=1, data-icon='/img/icon-code-file.png', selected=ticket.type===1)
                                                    | #{__('tickets.types.story')}
                                                option(value=2, data-icon='/img/icon-purchase-order.png', selected=ticket.type===2)
                                                    | #{__('tickets.types.milestone')}
                                            label
                                                | #{__('tickets.type')}
                                        .input-field.padding-10.col.s12.m3
                                            select.editField#stateSelection
                                                option(value=0, selected=ticket.state===0)
                                                    | #{__('tickets.states.new')}
                                                option(value=1, selected=ticket.state===1)
                                                    | #{__('tickets.states.in_development')}
                                                option(value=2, selected=ticket.state===2)
                                                    | #{__('tickets.states.code_review')}
                                                option(value=3, selected=ticket.state===3)
                                                    | #{__('tickets.states.ready_for_test')}
                                                option(value=4, selected=ticket.state===4)
                                                    | #{__('tickets.states.in_test')}
                                                option(value=5, selected=ticket.state===5)
                                                    | #{__('tickets.states.done')}
                                            label
                                                | #{__('tickets.state')}
                                        .input-field.padding-10.col.s12.m3
                                            select.editField.icons#prioritySelection
                                                option(value=0, data-icon='/img/icon-low-priority.png', selected=ticket.priority===0)
                                                    | #{__('tickets.priorities.low')}
                                                option(value=1, data-icon='/img/icon-medium-priority.png', selected=ticket.priority===1)
                                                    | #{__('tickets.priorities.medium')}
                                                option(value=2, data-icon='/img/icon-high-priority.png', selected=ticket.priority===2)
                                                    | #{__('tickets.priorities.high')}
                                            label
                                                | #{__('tickets.priority')}
                                        .input-field.padding-10.col.s12.m3
                                            input.editField(type='number', name='pointsSelection', min='1', max='10', value=ticket.points)#pointsSelection
                                            label(for='pointsSelection') #{__('tickets.points')}
                                    .row
                                        .input-field.padding-10
                                            label(for='description') #{__('tickets.description')}
                                        .input-field.padding-10
                                            #description #{ticket.description}
                                    if false
                                        .row.subtasksRow
                                            .input-field.padding-10#subtasksSelection
                                                input.editField.validate(type='text', name='subtasks')
                                                label(for='description') #{__('tickets.subtasks')}
                                    .row.milestoneIssuesRow
                                        .input-field.padding-10#milestoneIssuesSelection
                                            input.editField.validate(type='text', name='milestoneIssues')
                                            label(for='milestoneIssues') #{__('tickets.milestoneIssues')}
                                    .row
                                        .input-field.col.s4
                                            select.editField#relatedSelectedInput
                                                option(value='0') #{__('tickets.relation.blocks')}
                                                option(value='1') #{__('tickets.relation.blocked_by')}
                                                option(value='2') #{__('tickets.relation.duplicates')}
                                                option(value='3') #{__('tickets.relation.duplicated_by')}
                                                option(value='4') #{__('tickets.relation.fixes')}
                                                option(value='5') #{__('tickets.relation.fixed_by')}
                                            label #{__('tickets.relation.label')}
                                        .input-field.col.s6
                                            input.editField#relatedInput.validate(type='text')
                                            label(for='relatedInput') #{__('tickets.id')}
                                        .input-field.col.s2
                                            button.btn.btn-flat.waves-effect.waves-light.right.no-text-flat-buttons(onclick='saveLinkFunction()')#saveLinkButton
                                                i.material-icons.right save
                                    .row
                                        .input-field.padding-10#relatedTicketDivId
                                            each relatedTicket in relatedTickets
                                                .row.margin-bottom-0.margin-right-10
                                                    .chip.full-width.related-chips.text-left.ticketStatusColors(class=`state${relatedTicket.state}`, id=`${relatedTicket._id}_${relatedTicket.state}`)
                                                        img(src=`/picture/${relatedTicket.assigneePicture}`)
                                                        p.truncateTextCommon #{`${__('tickets.relation.'+relatedTicket.relatedText)}: ${relatedTicket.displayId}. ${relatedTicket.title}`}
                                                        i.close.material-icons(onclick=`removeRelatedId('${relatedTicket._id}')`) delete_forever
                                .col.s12.l4
                                    .row
                                        .input-field.padding-10
                                            input.editField(type='text', value=`${reporter}`, disabled)
                                            label(for='autocomplete-input') #{__('tickets.reporter')}
                                    .row
                                        .input-field.padding-10
                                            input.editField.autocomplete(type='text', value=`${assignee}`, name='assigneeAutocomplete')#assigneeAutocomplete
                                            label(for='assigneeAutocomplete') #{__('tickets.assignee')}
                                    .row.hidden#current-ticket-assingee #{ticket.assignee}
                                    .row.margin-bottom-0.margin-top-0
                                        .input-field.padding-10
                                            input.editField.autocomplete(type='text')#releasesAutocomplete
                                            label(for='releasesAutocomplete') #{__('tickets.release')}
                                    .row.margin-bottom-0.margin-top-0
                                        .input-field.padding-10#ticketReleasesDivId
                                            each release in releases
                                                    .chip.release-chips(id=`${release._id}`)
                                                        | #{release.name}
                                                        if release.status !== commonReleaseStatus.CLOSED.value
                                                            i.close.material-icons(onclick=`removeReleaseId('${release._id}')`) delete_forever
                                    if isScrumBoardType
                                        .row.margin-bottom-0.margin-top-0
                                            .input-field.padding-10
                                                input.editField.autocomplete(type='text')#sprintsAutocomplete
                                                label(for='sprintsAutocomplete') #{__('tickets.sprints')}
                                        .row.margin-bottom-0.margin-top-0
                                            .input-field.padding-10#ticketSprintsDivId
                                                each sprint in sprints
                                                    .chip.sprint-chips(id=`${sprint._id}`)
                                                        | #{sprint.name}
                                                        if sprint.status !== commonSprintStatus.CLOSED.value
                                                            i.close.material-icons(onclick=`removeSprintId('${sprint._id}')`) delete_forever
                                    .row.margin-bottom-0.margin-top-0
                                        .input-field.padding-10
                                            input.autocomplete(type='text')#tagsAutocomplete
                                            label(for='tagsAutocomplete') #{__('tickets.tags')}
                                    .row.margin-bottom-0.margin-top-0
                                        .input-field.padding-10#ticketTagsDivId
                                            each tag in tags
                                                .chip.tag-chips(id=`${tag._id}`)
                                                    | #{tag.name}
                                                    i.close.material-icons(onclick=`removeTagId('${tag._id}')`) delete_forever
                            .row
                                button.waves-effect.waves-light.btn.primaryColour-background-colour#saveTicketButton #{__('actions.save')}
                                    i.material-icons.right save
                #comments
                    .row
                        .col.s12
                            ul.collection#appendCommentDiv
                                each comment in comments
                                    li(id=`comment_${comment._id}`).collection-item.avatar
                                        img.circle(src=`/picture/${user.picture}`, alt='')
                                        if comment.userId === user._id
                                            button(onclick=`deleteComment('${comment._id}')`).btn.btn-flat.waves-effect.waves-light.right.no-text-flat-buttons.primaryColour
                                                i.material-icons.right delete_forever
                                        if comment.userId === user._id
                                            button(onclick=`changeToInput('${comment._id}')`).btn.btn-flat.waves-effect.waves-light.right.no-text-flat-buttons.primaryColour
                                                i.material-icons.right mode_edit
                                        span.title #{comment.username}
                                        br
                                        | #{comment.mtime}
                                        br
                                        | !{resolveCommentContent(comment.content)}
                    .row
                        .col.s12
                            .input-field
                                textarea.materialize-textarea#newComment
                                label(for="newComment")
                                    | #{__('tickets.writeComment')}
                            button.waves-effect.waves-light.btn.primaryColour-background-colour#addNewComment #{__('actions.comment')}
                                i.material-icons.right comment
                #history
                    .row
                        .col.s12
                            #states #{__('tickets.tabs.state')}
                                hr
                                .row
                                    if ticket.stateHistory.length === 0
                                        h6.center #{__('tickets.noHistory')}
                                    else
                                        ul.collection
                                            each entry in ticket.stateHistory
                                                li.collection-item.avatar
                                                    i.material-icons.circle compare_arrows
                                                    span.title #{resolveUsername(entry.actor)}
                                                    br
                                                    | #{entry.ctime}
                                                    br
                                                    | Before: #{__(`tickets.states.${resolveState(entry.from)}`)}
                                                    br
                                                    | After: #{__(`tickets.states.${resolveState(entry.to)}`)}
                    .row
                        .col.s12
                            #assignees #{__('tickets.tabs.assignee')}
                                hr
                                .row
                                    if ticket.assigneeHistory.length === 0
                                        h6.center #{__('tickets.noHistory')}
                                    else
                                        ul.collection
                                            each entry in ticket.assigneeHistory
                                                li.collection-item.avatar
                                                    i.material-icons.circle people
                                                    span.title #{resolveUsername(entry.actor)}
                                                    br
                                                    | #{entry.ctime}
                                                    br
                                                    | Before: #{resolveUsername(entry.from)}
                                                    br
                                                    | After: #{resolveUsername(entry.to)}

block scripts
    script(src='/js/tickets/tickets-edit.js')
    script(src='/summernote/summernote.js')
    script(src='/caretJs/jquery.caret.min.js')
    script(src='/atJs/js/jquery.atwho.min.js')
